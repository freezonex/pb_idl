syntax = "proto3";
package freezonex.openiiot_api;

import "freezonex/common/api.proto";
//import "freezonex/openiiot_api/supos.proto";
import "freezonex/openiiot_api/auth.proto";
import "freezonex/openiiot_api/tenant.proto";
import "freezonex/openiiot_api/user.proto";
import "freezonex/openiiot_api/edge.proto";
import "freezonex/openiiot_api/core.proto";
import "freezonex/openiiot_api/app.proto";
import "freezonex/openiiot_api/flow.proto";
import "freezonex/openiiot_api/global_config.proto";
import "freezonex/openiiot_api/emqx.proto";
import "freezonex/openiiot_api/grafana.proto";
import "freezonex/openiiot_api/tdengine.proto";
import "freezonex/openiiot_api/wms.proto";
//option go_package = "freezonex/openiiot/biz/model/openiiot_api_service";

service openiiot_api {

  // auth
  rpc GetAccessToken(GetAccessTokenRequest) returns (GetAccessTokenResponse) {
    option (api.post) = '/auth/accesstoken';
  }
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (api.post) = '/auth/logout';
  }
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (api.post) = '/auth/login';
  }


  //tenant
  rpc AddTenant(AddTenantRequest) returns (AddTenantResponse) {
    option (api.post) = '/tenant/add';
  }
  rpc GetTenant(GetTenantRequest) returns (GetTenantResponse) {
    option (api.post) = '/tenant/get';
  }
  rpc UpdateTenant(UpdateTenantRequest) returns (UpdateTenantResponse) {
    option (api.post) = '/tenant/update';
  }
  rpc DeleteTenant(DeleteTenantRequest) returns (DeleteTenantResponse) {
    option (api.post) = '/tenant/delete';
  }
  rpc GetAllTenantName(GetAllTenantNameRequest) returns (GetAllTenantNameResponse) {
    option (api.post) = '/tenant/allname';
  }


  //user
  rpc AddUser(AddUserRequest) returns (AddUserResponse) {
    option (api.post) = '/user/add';
  }
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (api.post) = '/user/get';
  }
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (api.post) = '/user/update';
  }
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (api.post) = '/user/delete';
  }
  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (api.post) = '/user/current';
  }
  rpc GetSuposUser(GetSuposUserRequest) returns (GetSuposUserResponse) {
    option (api.post) = '/user/supos/list';
  }
  rpc GetUserByToken(GetUserByTokenRequest) returns (GetUserByTokenResponse) {
    option (api.post) = '/user/getuserbytoken';
  }

  //edge
  rpc AddEdge(AddEdgeRequest) returns (AddEdgeResponse) {
    option (api.post) = '/edge/add';
  }
  rpc GetEdge(GetEdgeRequest) returns (GetEdgeResponse) {
    option (api.post) = '/edge/get';
  }
  rpc UpdateEdge(UpdateEdgeRequest) returns (UpdateEdgeResponse) {
    option (api.post) = '/edge/update';
  }
  rpc DeleteEdge(DeleteEdgeRequest) returns (DeleteEdgeResponse) {
    option (api.post) = '/edge/delete';
  }

  //core
  rpc AddCore(AddCoreRequest) returns (AddCoreResponse) {
    option (api.post) = '/core/add';
  }
  rpc GetCore(GetCoreRequest) returns (GetCoreResponse) {
    option (api.post) = '/core/get';
  }
  rpc UpdateCore(UpdateCoreRequest) returns (UpdateCoreResponse) {
    option (api.post) = '/core/update';
  }
  rpc DeleteCore(DeleteCoreRequest) returns (DeleteCoreResponse) {
    option (api.post) = '/core/delete';
  }

  //app
  rpc AddApp(AddAppRequest) returns (AddAppResponse) {
    option (api.post) = '/app/add';
  }
  rpc GetApp(GetAppRequest) returns (GetAppResponse) {
    option (api.post) = '/app/get';
  }
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse) {
    option (api.post) = '/app/update';
  }
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse) {
    option (api.post) = '/app/delete';
  }
  
  //flow
  rpc AddFlow(AddFlowRequest) returns (AddFlowResponse) {
    option (api.post) = '/flow/add';
  }
  rpc GetFlow(GetFlowRequest) returns (GetFlowResponse) {
    option (api.post) = '/flow/get';
  }
  rpc UpdateFlow(UpdateFlowRequest) returns (UpdateFlowResponse) {
    option (api.post) = '/flow/update';
  }
  rpc DeleteFlow(DeleteFlowRequest) returns (DeleteFlowResponse) {
    option (api.post) = '/flow/delete';
  }
  rpc LoadDemoFlow(LoadDemoFlowRequest) returns (LoadDemoFlowResponse) {
    option (api.post) = '/flow/loaddemoflow';//
  }

  //flow
  rpc AddGlobalConfig(AddGlobalConfigRequest) returns (AddGlobalConfigResponse) {
    option (api.post) = '/global-config/add';
  }
  rpc GetGlobalConfig(GetGlobalConfigRequest) returns (GetGlobalConfigResponse) {
    option (api.post) = '/global-config/get';
  }
  rpc UpdateGlobalConfig(UpdateGlobalConfigRequest) returns (UpdateGlobalConfigResponse) {
    option (api.post) = '/global-config/update';
  }
  rpc DeleteGlobalConfig(DeleteGlobalConfigRequest) returns (DeleteGlobalConfigResponse) {
    option (api.post) = '/global-config/delete';
  }

  //emqx
  rpc EmqxGetStatus(EmqxGetStatusRequest) returns (EmqxGetStatusResponse) {
    option (api.get) = "/emqx/status";
  }
  rpc EmqxCreateBridge(EmqxCreateBridgeRequest) returns (EmqxCreateBridgeResponse) {
    option (api.post) = "/emqx/bridge/create";
  }
  rpc EmqxCreateRule(EmqxCreateRuleRequest) returns (EmqxCreateRuleResponse) {
    option (api.post) = "/emqx/rule/create";
  }

  // grafana
  rpc GrafanaAuthorize(GrafanaAuthorizeRequest) returns (GrafanaAuthorizeResponse) {
    option (api.post) = '/grafana/auth/authorize';
  }
  rpc GrafanaToken(GrafanaAccessTokenRequest) returns (GrafanaAccessTokenResponse) {
    option (api.post) = '/grafana/auth/accesstoken';
  }
  rpc GrafanaUserInfo(GrafanaUserRequest) returns (GrafanaUserResponse) {
    option (api.post) = '/grafana/user';
  }

  rpc GrafanaGetDataSource(GrafanaGetDataSourceRequest) returns (GrafanaGetDataSourceResponse) {
    option (api.get) = '/grafana/datasource/get';
  }
  rpc GrafanaCreateDataSource(GrafanaCreateDataSourceRequest) returns (GrafanaCreateDataSourceResponse) {
    option (api.post) = '/grafana/datasource/create';
  }
  rpc GrafanaDeleteDataSource(GrafanaDeleteDataSourceRequest) returns (GrafanaDeleteDataSourceResponse) {
    option (api.post) = '/grafana/datasource/delete';
  }
  rpc GrafanaCreateDashboard(GrafanaCreateDashboardRequest) returns (GrafanaCreateDashboardResponse) {
    option (api.post) = '/grafana/dashboard/create';
  }
  rpc GrafanaSaveDashboardByUid(GrafanaSaveDashboardByUidRequest) returns (GrafanaSaveDashboardByUidResponse) {
    option (api.post) = '/grafana/dashboard/save/uid';
  }
  // tdengine
  rpc TDEngineTestConnection(TDEngineTestConnectionRequest) returns (TDEngineTestConnectionResponse) {
    option (api.post) = '/tdengine/testconnection';
  }
  rpc TDEngineExec(TDEngineExecRequest) returns (TDEngineExecResponse) {
    option (api.post) = '/tdengine/exec';
  }
  rpc TDEngineBatchExec(TDEngineBatchExecRequest) returns (TDEngineBatchExecResponse) {
    option (api.post) = '/tdengine/batchexec';
  }
  rpc TDEngineQuery(TDEngineQueryRequest) returns (TDEngineQueryResponse) {
    option (api.post) = '/tdengine/query';
  }

  //wms warehouse
  rpc AddWarehouse(AddWarehouseRequest) returns (AddWarehouseResponse) {
    option (api.post) = '/wms/warehouse/add';
  }
  rpc GetWarehouse(GetWarehouseRequest) returns (GetWarehouseResponse) {
    option (api.post) = '/wms/warehouse/get';
  }
  rpc UpdateWarehouse(UpdateWarehouseRequest) returns (UpdateWarehouseResponse) {
    option (api.post) = '/wms/warehouse/update';
  }
  rpc DeleteWarehouse(DeleteWarehouseRequest) returns (DeleteWarehouseResponse) {
    option (api.post) = '/wms/warehouse/delete';
  }


  rpc AddStorageLocation(AddStorageLocationRequest) returns (AddStorageLocationResponse) {
    option (api.post) = '/wms/storagelocation/add';
  }
  rpc GetStorageLocation(GetStorageLocationRequest) returns (GetStorageLocationResponse) {
    option (api.post) = '/wms/storagelocation/get';
  }
  rpc UpdateStorageLocation(UpdateStorageLocationRequest) returns (UpdateStorageLocationResponse) {
    option (api.post) = '/wms/storagelocation/update';
  }
  rpc DeleteStorageLocation(DeleteStorageLocationRequest) returns (DeleteStorageLocationResponse) {
    option (api.post) = '/wms/storagelocation/delete';
  }


  rpc AddMaterial(AddMaterialRequest) returns (AddMaterialResponse) {
    option (api.post) = '/wms/material/add';
  }
  rpc GetMaterial(GetMaterialRequest) returns (GetMaterialResponse) {
    option (api.post) = '/wms/material/get';
  }
  rpc UpdateMaterial(UpdateMaterialRequest) returns (UpdateMaterialResponse) {
    option (api.post) = '/wms/material/update';
  }
  rpc DeleteMaterial(DeleteMaterialRequest) returns (DeleteMaterialResponse) {
    option (api.post) = '/wms/material/delete';
  }

  rpc AddInbound(AddInboundRequest) returns (AddInboundResponse) {
    option (api.post) = '/wms/inbound/add';
  }
  rpc GetInbound(GetInboundRequest) returns (GetInboundResponse) {
    option (api.post) = '/wms/inbound/get';
  }
  rpc UpdateInbound(UpdateInboundRequest) returns (UpdateInboundResponse) {
    option (api.post) = '/wms/inbound/update';
  }
  rpc DeleteInbound(DeleteInboundRequest) returns (DeleteInboundResponse) {
    option (api.post) = '/wms/inbound/delete';
  }

  /*rpc AddInboundRecord(AddInboundRecordRequest) returns (AddInboundRecordResponse) {
    option (api.post) = '/wms/inboundrecord/add';
  }*/
  rpc GetInboundRecord(GetInboundRecordRequest) returns (GetInboundRecordResponse) {
    option (api.post) = '/wms/inbound/material/get';
  }
  /*rpc UpdateInboundRecord(UpdateInboundRecordRequest) returns (UpdateInboundRecordResponse) {
    option (api.post) = '/wms/inboundrecord/update';
  }
  rpc DeleteInboundRecord(DeleteInboundRecordRequest) returns (DeleteInboundRecordResponse) {
    option (api.post) = '/wms/inboundrecord/delete';
  }*/

  rpc AddOutbound(AddOutboundRequest) returns (AddOutboundResponse) {
    option (api.post) = '/wms/outbound/add';
  }
  rpc GetOutbound(GetOutboundRequest) returns (GetOutboundResponse) {
    option (api.post) = '/wms/outbound/get';
  }
  rpc UpdateOutbound(UpdateOutboundRequest) returns (UpdateOutboundResponse) {
    option (api.post) = '/wms/outbound/update';
  }
  rpc DeleteOutbound(DeleteOutboundRequest) returns (DeleteOutboundResponse) {
    option (api.post) = '/wms/outbound/delete';
  }
  rpc GetOutboundRecord(GetOutboundRecordRequest) returns (GetOutboundRecordResponse) {
    option (api.post) = '/wms/outbound/material/get';
  }

  rpc AddStocktaking(AddStocktakingRequest) returns (AddStocktakingResponse) {
    option (api.post) = '/wms/stocktaking/add';
  }
  rpc GetStocktaking(GetStocktakingRequest) returns (GetStocktakingResponse) {
    option (api.post) = '/wms/stocktaking/get';
  }
  rpc UpdateStocktaking(UpdateStocktakingRequest) returns (UpdateStocktakingResponse) {
    option (api.post) = '/wms/stocktaking/update';
  }
  rpc DeleteStocktaking(DeleteStocktakingRequest) returns (DeleteStocktakingResponse) {
    option (api.post) = '/wms/stocktaking/delete';
  }

}

